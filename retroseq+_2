LTR5_Hs_length = 968               # the expected length of the full target insertion
end_cut_off = 470                  # the midpoint of the target insertion length
conf_count = 0
unconf_count = 0
confirmed_list = []
for dirname in os.listdir(pipeline_results):                                        # loop through a directory of directories, where each subdirectory contains retroseq+ (step 1, repeatmasker) results for a single sample  
    hold_dict = defaultdict(list)
    for file in os.listdir(pipeline_results + dirname):                             # each file in the subdirectory corresponds to a repeatmasker file for a given predicted locus.
        data = open(pipeline_results + dirname + '/' + file)
        locus = file.split('\uf03a')[0] + ':' + file.split('\uf03a')[1].split('.')[0]     # extract the locus name
        for line in data:
            if 'LTR5_Hs' in line:                                                         # loop through the file and see if repeatmasker detected any LTR5_Hs elements - store in a dict
                hold_dict[locus].append(line)
    for key, value in hold_dict.items():
        print(key)
        confirmed = False
        contig_end_list = []
        contig_start_list = []
        for i in value:
            if i.split()[8] == 'C':
                start = i.split()[13]
                end = i.split()[12]
                if abs(LTR5_Hs_length - int(end)) < end_cut_off:
                    contig_end_list.append(i.split()[4])
                if int(start) < end_cut_off:
                    contig_start_list.append(i.split()[4])

            else:
                print(i.split(), '\n')
                start = i.split()[11]
                end = i.split()[12]
                if abs(LTR5_Hs_length - int(end)) < end_cut_off:
                    contig_end_list.append(i.split()[4])
                if int(start) < end_cut_off:
                    contig_start_list.append(i.split()[4])
        for j in contig_start_list:
            if j not in contig_end_list:
                confirmed = True
        for k in contig_start_list:
            if k not in contig_end_list:
                confirmed = True
        if len(contig_start_list) == 0 or len(contig_end_list) == 0:
            confirmed = False
        if confirmed == True:
            conf_count += 1
            confirmed_list.append(key)
        else:
            unconf_count += 1
